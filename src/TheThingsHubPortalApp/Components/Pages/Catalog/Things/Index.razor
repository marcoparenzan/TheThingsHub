@page "/catalog/things"
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer

@inject CatalogService catalogService
@inject NavigationManager nm
@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>Things</PageTitle>

<h1>Hello, Things!</h1>

<MudDataGrid Items="@things">
    <Columns>
        <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Description)" Sortable="true" />

        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudStack Row>
                    <MudButton @onclick="() => ShowPasswordAsync(context)" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Default">Show Password</MudButton>
                    <MudButton @onclick="() => GetCertificateSasAsync(context)" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Default">Get Certificate SAS</MudButton>
                    <MudButton @onclick="() => EditAsync(context)" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Secondary">Edit</MudButton>
                    <MudButton @onclick="() => DeleteAsync(context)" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Warning">Delete</MudButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="CreateAsync">Create</MudButton>

@code {
    IQueryable<ThingItem> things;

    [Inject] private IDialogService DialogService { get; set; }

    [Inject] private WebLib.UriTools UriTools { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            things = await catalogService.ThingsAsync();
            StateHasChanged();
        }
    }

    async Task EditAsync(CellContext<ThingItem> context)
    {
        nm.NavigateTo($"catalog/things/edit/{context.Item.Id}");
    }

    async Task DeleteAsync(CellContext<ThingItem> context)
    {
        nm.NavigateTo($"catalog/things/delete/{context.Item.Id}");
    }

    async Task ShowPasswordAsync(CellContext<ThingItem> context)
    {
        try
        {
            var password = await catalogService.GetThingPropertyAsync(context.Item.Name, "Password");
            var result = await DialogService.ShowMessageBox("Password", password.Value, yesText: "OK", cancelText: "Cancel", options: new DialogOptions() { CloseOnEscapeKey = true });
        }
        catch (Exception ex)
        {
            await ShowExceptionAsync(ex);
        }
    }

    async Task GetCertificateSasAsync(CellContext<ThingItem> context)
    {
        try
        {
            var request = HttpContextAccessor.HttpContext.Request;
            var url = $"{request.Scheme}://{request.Host}/api/things/{context.Item.Name}/certificate";
            var sasUrl = UriTools.GenerateSasUrl(url);
            var result = await DialogService.ShowMessageBox("SAS", sasUrl, yesText: "OK", cancelText: "Cancel", options: new DialogOptions() { CloseOnEscapeKey = true });
        }
        catch (Exception ex)
        {
            await ShowExceptionAsync(ex);
        }
    }

    async Task ShowExceptionAsync(Exception exception)
    {
        var result = await DialogService.ShowMessageBox("Error", exception.Message, yesText: "OK", cancelText: "Cancel", options: new DialogOptions() { CloseOnEscapeKey = true });
    }

    async Task CreateAsync()
    {
        nm.NavigateTo("/catalog/things/create");    
    }
}